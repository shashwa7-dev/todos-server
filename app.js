/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const { v4: uuidv4 } = require("uuid");
const bodyParser = require("body-parser");
const fs = require("fs");
const app = express();
const port = process.env.PORT || 3001;

app.use(bodyParser.json());

const readTodos = () => {
  return new Promise((resolve, reject) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if (err) reject({ msg: "Error fetching todos!" });
      resolve(JSON.parse(data));
    });
  });
};
const writeTodos = (todos) => {
  return new Promise((resolve, reject) => {
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) reject({ msg: "Error adding todos!" });
      resolve({ msg: "Todos Added/Updated!" });
    });
  });
};
//get all todos
app.get("/todos", (req, res) => {
  readTodos()
    .then((data) => res.status(200).json(data))
    .catch((err) => res.status(500).json(err));
  // res.json({ todos: todos });
});
//add todo
app.post("/todos", (req, res) => {
  const { description } = req.body;
  if (description) {
    const timeElapsed = Date.now();
    const today = new Date(timeElapsed);
    readTodos()
      .then((data) => {
        let todosDB = { ...data };
        todosDB.todos.push({
          id: uuidv4(),
          todo: description,
          time: today.toUTCString(),
        });
        writeTodos(todosDB)
          .then((data) => res.status(200).json(data))
          .catch((err) => res.status(400).json(err));
      })
      .catch((err) => res.status(400).json(err));
  }
});
//get todo
app.get("/todos/:id", (req, res) => {
  readTodos()
    .then((data) => {
      const todo = data.todos.filter((todo) => todo.id === req.params.id)[0];
      if (todo) res.json(todo);
      else res.status(400).json({ msg: "Todo doesn't exists" });
    })
    .catch((err) => res.status(400).json(err));
});

//update todo
app.put("/todos/:id", (req, res) => {
  const { description } = req.body;
  const todoID = req.params.id;
  readTodos()
    .then((data) => {
      let todosDB = { ...data };
      if (todosDB.todos.filter((todo) => todo.id === todoID).length > 0) {
        const _todos = todosDB.todos.map((todo) => {
          if (todo.id === todoID) {
            todo.todo = description;
          }
          return todo;
        });
        writeTodos({ todos: _todos })
          .then((data) => res.status(200).json(data))
          .catch((err) => res.status(400).json(err));
      } else {
        res.status(400).json({ msg: "Todo not found!" });
      }
    })
    .catch((err) => res.status(400).json(err));
});
//delete todo
app.delete("/todos/:id", (req, res) => {
  const todoID = req.params.id;
  readTodos()
    .then((data) => {
      let todosDB = { ...data };
      if (todosDB.todos.filter((todo) => todo.id === todoID).length > 0) {
        const _todos = todosDB.todos.filter((todo) => todo.id !== todoID);
        writeTodos({ todos: _todos })
          .then((data) => res.status(200).json(data))
          .catch((err) => res.status(400).json(err));
      } else {
        res.status(400).json({ msg: "Todo not found!" });
      }
    })
    .catch((err) => res.status(400).json(err));
});
//get file contents
app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});

module.exports = app;
